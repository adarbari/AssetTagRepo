# Asset Tag Backend Environment Configuration
# Copy this file to .env and update the values
# 
# PREREQUISITES:
# 1. Install Docker Desktop: https://www.docker.com/products/docker-desktop/
# 2. Start Docker Desktop application
# 3. Run: docker-compose up -d (to start all infrastructure services)
# 4. Run: alembic upgrade head (to set up database)
# 5. Run: python -m uvicorn main:app --reload --host 0.0.0.0 --port 8000

# Environment
ASSET_TAG_ENVIRONMENT=local

# Database Configuration
ASSET_TAG_POSTGRES_HOST=localhost
ASSET_TAG_POSTGRES_PORT=5432
ASSET_TAG_POSTGRES_DB=asset_tag
ASSET_TAG_POSTGRES_USER=dev_user
ASSET_TAG_POSTGRES_PASSWORD=dev_pass

# Redis Configuration
ASSET_TAG_REDIS_URL=redis://localhost:6379

# Streaming Configuration (Local vs AWS)
ASSET_TAG_USE_LOCAL_STREAMING=true
ASSET_TAG_KINESIS_STREAM_NAME=bluetooth-observations
ASSET_TAG_AWS_REGION=us-east-1
ASSET_TAG_REDPANDA_BROKERS=localhost:9092

# Storage Configuration (Local vs AWS)
ASSET_TAG_USE_LOCAL_STORAGE=true
ASSET_TAG_S3_ENDPOINT_URL=http://localhost:9000
ASSET_TAG_S3_ACCESS_KEY=minioadmin
ASSET_TAG_S3_SECRET_KEY=minioadmin
ASSET_TAG_S3_BUCKET=asset-tag-data

# Authentication
ASSET_TAG_SECRET_KEY=change-me-in-production-secret-key-very-long-and-secure
ASSET_TAG_ALGORITHM=HS256
ASSET_TAG_ACCESS_TOKEN_EXPIRE_MINUTES=30

# API Configuration
ASSET_TAG_API_V1_PREFIX=/api/v1
ASSET_TAG_CORS_ORIGINS=["http://localhost:5173", "http://localhost:3000"]

# Monitoring Configuration (Local vs AWS)
ASSET_TAG_USE_LOCAL_MONITORING=true
ASSET_TAG_PROMETHEUS_PORT=9090
ASSET_TAG_GRAFANA_PORT=3001

# ML Configuration
ASSET_TAG_USE_LOCAL_MLFLOW=true
ASSET_TAG_MLFLOW_TRACKING_URI=http://localhost:5000

# Logging
ASSET_TAG_LOG_LEVEL=INFO
ASSET_TAG_USE_STRUCTURED_LOGGING=true

# Location Estimation
ASSET_TAG_LOCATION_ESTIMATION_WINDOW_MINUTES=1
ASSET_TAG_MIN_GATEWAYS_FOR_TRILATERATION=3
ASSET_TAG_RSSI_PATH_LOSS_EXPONENT=2.0
ASSET_TAG_RSSI_REFERENCE_DISTANCE=1.0
ASSET_TAG_RSSI_REFERENCE_POWER=-45.0

# Alert Configuration
ASSET_TAG_BATTERY_LOW_THRESHOLD=20
ASSET_TAG_OFFLINE_THRESHOLD_MINUTES=30
ASSET_TAG_GEOFENCE_CACHE_TTL_SECONDS=3600

# Performance
ASSET_TAG_MAX_CONCURRENT_REQUESTS=100
ASSET_TAG_REQUEST_TIMEOUT_SECONDS=30

# Elasticsearch Configuration (Local vs AWS)
ASSET_TAG_USE_LOCAL_ELASTICSEARCH=true
ASSET_TAG_ELASTICSEARCH_URL=http://localhost:9200

# Docker Services Status Check
# Run 'docker-compose ps' to check if all services are running:
# - postgres:5432 (PostgreSQL with TimescaleDB)
# - redis:6379 (Redis Cache)
# - minio:9000 (S3-compatible storage)
# - elasticsearch:9200 (Search engine)
# - redpanda:9092 (Kafka-compatible streaming)
# - prometheus:9090 (Metrics)
# - grafana:3001 (Dashboards)
# - mlflow:5000 (ML model tracking)
# - jaeger:16686 (Distributed tracing)

# Service Health Check URLs (when running locally):
# - API Health: http://localhost:8000/health
# - API Docs: http://localhost:8000/docs
# - Grafana: http://localhost:3001 (admin/admin)
# - Prometheus: http://localhost:9090
# - MLFlow: http://localhost:5000
# - MinIO Console: http://localhost:9001 (minioadmin/minioadmin)
# - Jaeger: http://localhost:16686
