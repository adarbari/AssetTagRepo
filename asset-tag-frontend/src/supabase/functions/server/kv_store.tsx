import React from &apos;react&apos;;
/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_668f981a (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/jtzbcspwcqancmrntsud/database/tables

// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from &apos;jsr:@supabase/supabase-js&apos;;

const client = () =>
  createClient(
    Deno.env.get(&apos;SUPABASE_URL&apos;),
    Deno.env.get(&apos;SUPABASE_SERVICE_ROLE_KEY&apos;)
  );

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from(&apos;kv_store_668f981a&apos;).upsert({
    key,
    value,
  });
  if (error) {
    throw new Error(error.message);
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const supabase = client();
  const { data, error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .select(&apos;value&apos;)
    .eq(&apos;key&apos;, key)
    .maybeSingle();
  if (error) {
    throw new Error(error.message);
  }
  return data?.value;
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const supabase = client();
  const { error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .delete()
    .eq(&apos;key&apos;, key);
  if (error) {
    throw new Error(error.message);
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: unknown[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
  if (error) {
    throw new Error(error.message);
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<unknown[]> => {
  const supabase = client();
  const { data, error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .select(&apos;value&apos;)
    .in(&apos;key&apos;, keys);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map(d => d.value) ?? [];
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .delete()
    .in(&apos;key&apos;, keys);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<unknown[]> => {
  const supabase = client();
  const { data, error } = await supabase
    .from(&apos;kv_store_668f981a&apos;)
    .select(&apos;key, value&apos;)
    .like(&apos;key&apos;, prefix + &apos;%&apos;);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map(d => d.value) ?? [];
};
