name: Lint and Security Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    outputs:
      status:
        description: "Lint gate status"
        value: ${{ jobs.final-status.outputs.status }}

# Cancel outdated workflow runs to save resources
concurrency:
  group: lint-gate-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20.x'

jobs:
  # Detect which components have changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'asset-tag-backend/**'
          frontend:
            - 'asset-tag-frontend/**'

  # Phase 1: Initial lint + security checks
  lint-and-security-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: 'asset-tag-frontend/package-lock.json'
    
    - name: Install Python dependencies
      if: needs.changes.outputs.backend == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
        pip install bandit safety
    
    - name: Install Node.js dependencies
      if: needs.changes.outputs.frontend == 'true'
      run: |
        npm ci --workspace=asset-tag-frontend
      working-directory: .
    
    - name: Run comprehensive lint and security checks
      id: lint-check
      run: |
        echo "üîç Running comprehensive lint and security verification..."
        
        # Make scripts executable
        chmod +x ./scripts/verify-lint-checks.sh
        chmod +x ./scripts/auto-fix-imports.sh
        
        # Run verification with JSON output
        if ./scripts/verify-lint-checks.sh --json; then
          echo "‚úÖ All lint and security checks passed"
          echo "lint-status=passed" >> $GITHUB_OUTPUT
          echo "error-count=0" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Lint and security checks failed"
          echo "lint-status=failed" >> $GITHUB_OUTPUT
          # Capture error count from script output
          ERROR_COUNT=$(./scripts/verify-lint-checks.sh --json 2>&1 | grep -o '"error_count":[0-9]*' | cut -d':' -f2 || echo "1")
          echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload lint check results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-check-results
        path: |
          asset-tag-backend/bandit-report.json
          asset-tag-backend/safety-report.json
        retention-days: 1

  # Phase 2: Auto-fix (only if Phase 1 fails)
  auto-fix:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security-check]
    if: always() && needs.lint-and-security-check.result == 'failure'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: 'asset-tag-frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        if [ "${{ needs.changes.outputs.backend }}" == "true" ]; then
          python -m pip install --upgrade pip
          pip install -r asset-tag-backend/requirements-dev.txt
        fi
        if [ "${{ needs.changes.outputs.frontend }}" == "true" ]; then
          npm ci --workspace=asset-tag-frontend
        fi
      working-directory: .
    
    - name: Run auto-fix (in-workflow mode)
      id: auto-fix
      run: |
        echo "üîß Attempting to auto-fix lint and security issues..."
        
        # Run auto-fix script in workflow mode (no commit)
        if ./scripts/auto-fix-imports.sh --workflow-mode; then
          echo "‚úÖ Auto-fix completed successfully"
          echo "fix-status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Auto-fix failed"
          echo "fix-status=failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload auto-fix results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: auto-fix-results
        path: |
          asset-tag-backend/
          asset-tag-frontend/
        retention-days: 1

  # Phase 3: Re-validate (only if auto-fix ran)
  re-validate:
    runs-on: ubuntu-latest
    needs: [changes, auto-fix]
    if: always() && needs.auto-fix.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: 'asset-tag-frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        if [ "${{ needs.changes.outputs.backend }}" == "true" ]; then
          python -m pip install --upgrade pip
          pip install -r asset-tag-backend/requirements-dev.txt
        fi
        if [ "${{ needs.changes.outputs.frontend }}" == "true" ]; then
          npm ci --workspace=asset-tag-frontend
        fi
      working-directory: .
    
    - name: Download and apply auto-fix results
      uses: actions/download-artifact@v3
      with:
        name: auto-fix-results
        path: .
    
    - name: Re-validate after auto-fix
      id: re-validate
      run: |
        echo "üîç Re-validating after auto-fix..."
        
        if ./scripts/verify-lint-checks.sh --json; then
          echo "‚úÖ All lint and security checks now pass after auto-fix"
          echo "validation-status=passed" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Lint and security checks still fail after auto-fix"
          echo "validation-status=failed" >> $GITHUB_OUTPUT
        fi

  # Phase 4: Commit fixes (only if re-validate passed)
  commit-fixes:
    runs-on: ubuntu-latest
    needs: [changes, re-validate]
    if: needs.re-validate.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Download and apply auto-fix results
      uses: actions/download-artifact@v3
      with:
        name: auto-fix-results
        path: .
    
    - name: Commit auto-fixes
      run: |
        echo "üìù Committing auto-fixes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
        else
          # Commit changes
          git commit -m "üîß Auto-fix: Resolve lint and security issues

          - Fixed import sorting with isort
          - Fixed code formatting with black
          - Fixed frontend formatting with prettier
          - Applied consistent formatting rules
          - Resolved security issues where possible
          
          Auto-generated by lint-gate workflow"
          
          # Push changes
          git push
          
          echo "‚úÖ Auto-fixes committed and pushed"
        fi

  # Phase 5: Create issue (if auto-fix couldn't resolve)
  create-issue:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security-check, re-validate]
    if: always() && needs.lint-and-security-check.result == 'failure' && (needs.re-validate.result == 'failure' || needs.re-validate.result == 'skipped')
    
    steps:
    - name: Create issue for unfixable issues
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üîß Lint/Security Issues Require Manual Fix - ${context.sha.substring(0, 7)}`;
          const body = `## Lint and Security Issues Detected
          
          The lint-gate workflow detected issues that could not be automatically fixed.
          
          ### Details
          - **Commit**: ${context.sha}
          - **Branch**: ${context.ref}
          - **Workflow**: ${context.workflow}
          - **Run ID**: ${context.runId}
          
          ### Next Steps
          1. Review the lint check results in the workflow logs
          2. Fix the remaining issues manually
          3. Re-run the workflow to verify fixes
          
          ### Auto-fix Status
          - **Initial Check**: Failed
          - **Auto-fix Attempt**: ${process.env.AUTO_FIX_STATUS || 'Unknown'}
          - **Re-validation**: ${process.env.RE_VALIDATION_STATUS || 'Unknown'}
          
          Please address these issues to ensure code quality and security standards are met.
          
          **Note**: The main CI pipeline is blocked until these issues are resolved.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'lint', 'security', 'auto-generated', 'blocking']
          });

  # Final status job
  final-status:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security-check, re-validate]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    
    outputs:
      status: ${{ steps.status.outputs.status }}
    
    steps:
    - name: Determine final status
      id: status
      run: |
        if [ "${{ needs.lint-and-security-check.result }}" == "success" ]; then
          echo "‚úÖ Lint gate passed - main CI can proceed"
          echo "status=success" >> $GITHUB_OUTPUT
        elif [ "${{ needs.re-validate.result }}" == "success" ]; then
          echo "‚úÖ Lint gate passed after auto-fix - main CI can proceed"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Lint gate failed - main CI blocked"
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const lintStatus = '${{ needs.lint-and-security-check.result }}';
          const reValidateStatus = '${{ needs.re-validate.result }}';
          const finalStatus = '${{ steps.status.outputs.status }}';
          
          let comment = `## üîç Lint and Security Gate Results
          
          ### Status: ${finalStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}
          
          `;
          
          if (finalStatus === 'success') {
            if (lintStatus === 'success') {
              comment += `üéâ All lint and security checks passed on first attempt! Your code is ready for the main CI pipeline.`;
            } else {
              comment += `üéâ All lint and security checks passed after auto-fix! The issues have been automatically resolved and committed.`;
            }
          } else {
            comment += `‚ö†Ô∏è **Manual intervention required.** Some lint or security issues could not be automatically fixed. Please review the workflow logs and fix the remaining issues manually.
            
            **Note**: The main CI pipeline is blocked until these issues are resolved.`;
          }
          
          comment += `
          
          ### Check Results:
          - **Initial Lint Check**: ${lintStatus}
          - **Re-validation**: ${reValidateStatus || 'Not applicable'}
          - **Final Status**: ${finalStatus}
          
          ---
          *This comment was automatically generated by the lint-gate workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
