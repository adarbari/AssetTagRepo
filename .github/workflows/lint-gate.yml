name: Lint and Security Gate

on:
  workflow_call:
    outputs:
      status:
        description: "Lint gate status"
        value: ${{ jobs.final-status.outputs.status }}
      backend-changed:
        description: "Whether backend changed"
        value: ${{ jobs.changes.outputs.backend }}
      frontend-changed:
        description: "Whether frontend changed"
        value: ${{ jobs.changes.outputs.frontend }}

# Cancel outdated workflow runs to save resources
concurrency:
  group: lint-gate-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20.x'

jobs:
  # Detect which components have changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'asset-tag-backend/**'
          frontend:
            - 'asset-tag-frontend/**'

  # Comprehensive lint and security check with auto-fix
  lint-and-security-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Cache npm dependencies
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
    
    - name: Install Python dependencies
      if: needs.changes.outputs.backend == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
        pip install bandit safety
    
    - name: Install Node.js dependencies
      if: needs.changes.outputs.frontend == 'true'
      run: |
        npm ci --workspace=asset-tag-frontend
      working-directory: .
    
    - name: Run initial lint and security checks
      id: initial-check
      run: |
        echo "🔍 Running comprehensive lint and security verification..."
        
        # Make scripts executable
        chmod +x ./scripts/verify-lint-checks.sh
        chmod +x ./scripts/auto-fix-imports.sh
        
        # Run verification
        if ./scripts/verify-lint-checks.sh; then
          echo "✅ All lint and security checks passed on first attempt"
          echo "lint-status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Lint and security checks failed - attempting auto-fix"
          echo "lint-status=failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Auto-fix issues
      if: steps.initial-check.outputs.lint-status == 'failed'
      id: auto-fix
      run: |
        echo "🔧 Attempting to auto-fix lint and security issues..."
        
        # Run auto-fix script
        if ./scripts/auto-fix-imports.sh --workflow-mode; then
          echo "✅ Auto-fix completed successfully"
          echo "fix-status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Auto-fix failed"
          echo "fix-status=failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Re-validate after auto-fix
      if: steps.initial-check.outputs.lint-status == 'failed' && steps.auto-fix.outputs.fix-status == 'success'
      id: re-validate
      run: |
        echo "🔍 Re-validating after auto-fix..."
        
        if ./scripts/verify-lint-checks.sh; then
          echo "✅ All lint and security checks now pass after auto-fix"
          echo "validation-status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Lint and security checks still fail after auto-fix"
          echo "validation-status=failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit auto-fixes
      if: steps.initial-check.outputs.lint-status == 'failed' && steps.auto-fix.outputs.fix-status == 'success' && steps.re-validate.outputs.validation-status == 'passed'
      run: |
        echo "📝 Committing auto-fixes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit"
        else
          # Commit changes
          git commit -m "🔧 Auto-fix: Resolve lint and security issues

          - Fixed import sorting with isort
          - Fixed code formatting with black
          - Fixed frontend formatting with prettier
          - Applied consistent formatting rules
          - Resolved security issues where possible
          
          Auto-generated by lint-gate workflow"
          
          # Push changes
          git push
          
          echo "✅ Auto-fixes committed and pushed"
        fi
    
    - name: Create issue for unfixable issues
      if: steps.initial-check.outputs.lint-status == 'failed' && (steps.auto-fix.outputs.fix-status == 'failed' || steps.re-validate.outputs.validation-status == 'failed')
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🔧 Lint/Security Issues Require Manual Fix - ${context.sha.substring(0, 7)}`;
          const body = `## Lint and Security Issues Detected
          
          The lint-gate workflow detected issues that could not be automatically fixed.
          
          ### Details
          - **Commit**: ${context.sha}
          - **Branch**: ${context.ref}
          - **Workflow**: ${context.workflow}
          - **Run ID**: ${context.runId}
          
          ### Next Steps
          1. Review the lint check results in the workflow logs
          2. Fix the remaining issues manually
          3. Re-run the workflow to verify fixes
          
          ### Auto-fix Status
          - **Initial Check**: Failed
          - **Auto-fix Attempt**: ${process.env.AUTO_FIX_STATUS || 'Unknown'}
          - **Re-validation**: ${process.env.RE_VALIDATION_STATUS || 'Unknown'}
          
          Please address these issues to ensure code quality and security standards are met.
          
          **Note**: The main CI pipeline is blocked until these issues are resolved.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'lint', 'security', 'auto-generated', 'blocking']
          });

  # Final status job
  final-status:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security-check]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    
    outputs:
      status: ${{ steps.status.outputs.status }}
    
    steps:
    - name: Determine final status
      id: status
      run: |
        if [ "${{ needs.lint-and-security-check.result }}" == "success" ]; then
          echo "✅ Lint gate passed - main CI can proceed"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Lint gate failed - main CI blocked"
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const lintStatus = '${{ needs.lint-and-security-check.result }}';
          const finalStatus = '${{ steps.status.outputs.status }}';
          
          let comment = `## 🔍 Lint and Security Gate Results
          
          ### Status: ${finalStatus === 'success' ? '✅ PASSED' : '❌ FAILED'}
          
          `;
          
          if (finalStatus === 'success') {
            comment += `🎉 All lint and security checks passed! Your code is ready for the main CI pipeline.`;
          } else {
            comment += `⚠️ **Manual intervention required.** Some lint or security issues could not be automatically fixed. Please review the workflow logs and fix the remaining issues manually.
            
            **Note**: The main CI pipeline is blocked until these issues are resolved.`;
          }
          
          comment += `
          
          ### Check Results:
          - **Lint Gate Status**: ${lintStatus}
          - **Final Status**: ${finalStatus}
          
          ---
          *This comment was automatically generated by the lint-gate workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });