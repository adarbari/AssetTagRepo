name: Backend CI (Improved)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-backend/**'
      - '.github/workflows/backend-ci-improved.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-backend/**'
      - '.github/workflows/backend-ci-improved.yml'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd asset-tag-backend
        flake8 modules tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 modules tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        cd asset-tag-backend
        black --check modules tests
    
    - name: Check import sorting with isort
      run: |
        cd asset-tag-backend
        isort --check-only modules tests
    
    - name: Type check with mypy
      run: |
        cd asset-tag-backend
        mypy modules --ignore-missing-imports

  test-fast:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements.txt
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Run fast tests
      run: |
        cd asset-tag-backend
        python -m pytest tests/unit/ -v --maxfail=5

  test-comprehensive:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements.txt
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Run comprehensive tests
      run: |
        cd asset-tag-backend
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

  # Auto-fix integration - call the reusable workflow
  auto-fix:
    needs: [lint-and-format, test-fast, test-comprehensive]
    if: always() && (needs.lint-and-format.result == 'failure' || needs.test-fast.result == 'failure' || needs.test-comprehensive.result == 'failure')
    uses: ./.github/workflows/auto-fix-reusable.yml
    with:
      workflow-name: "Backend CI (Improved)"
      workflow-conclusion: "failure"
      logs-content: |
        Lint and Format: ${{ needs.lint-and-format.result }}
        Test Fast: ${{ needs.test-fast.result }}
        Test Comprehensive: ${{ needs.test-comprehensive.result }}
      error-context: "Backend CI workflow failed - check individual job results"
    permissions:
      contents: write
      issues: write
      pull-requests: write
    secrets: inherit
