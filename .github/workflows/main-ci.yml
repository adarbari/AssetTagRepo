name: Main CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Run lint checks first
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd asset-tag-backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Install Node.js dependencies
      run: |
        cd asset-tag-frontend
        npm ci
    
    - name: Run Python linting
      run: |
        cd asset-tag-backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
        mypy . --ignore-missing-imports
    
    - name: Run Node.js linting
      run: |
        cd asset-tag-frontend
        npm run lint
    
    - name: Run security checks
      run: |
        cd asset-tag-backend
        bandit -r . -f json -o bandit-report.json || true

  # Run tests in TEST mode (fast, mocked services)
  test-mode:
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: dev_user
          POSTGRES_PASSWORD: dev_pass
          POSTGRES_DB: asset_tag_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd asset-tag-backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements-test.txt
    
    - name: Create test databases
      run: |
        cd asset-tag-backend
        PGPASSWORD=dev_pass psql -h localhost -U dev_user -d postgres -c "CREATE DATABASE asset_tag_test;"
        PGPASSWORD=dev_pass psql -h localhost -U dev_user -d postgres -c "CREATE DATABASE asset_tag_beta;"
      env:
        PGPASSWORD: dev_pass
    
    - name: Run database migrations
      run: |
        cd asset-tag-backend
        ASSET_TAG_ENVIRONMENT=test alembic upgrade head
      env:
        ASSET_TAG_ENVIRONMENT: test
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_test
    
    - name: Run unit tests
      run: |
        cd asset-tag-backend
        ASSET_TAG_ENVIRONMENT=test python -m pytest tests/unit/ -v --cov=modules --cov-report=xml
      env:
        ASSET_TAG_ENVIRONMENT: test
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_test
    
    - name: Run integration tests (TEST mode)
      run: |
        cd asset-tag-backend
        ASSET_TAG_ENVIRONMENT=test python -m pytest tests/integration/ -v --tb=short
      env:
        ASSET_TAG_ENVIRONMENT: test
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./asset-tag-backend/coverage.xml
        flags: test-mode
        name: test-mode-coverage

  # Run tests in BETA mode (full services) - only on main branch or PRs
  beta-mode:
    needs: [lint, test-mode]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: dev_user
          POSTGRES_PASSWORD: dev_pass
          POSTGRES_DB: asset_tag_beta
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9000:9000
        command: server /data --console-address ":9001"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd asset-tag-backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements-test.txt
    
    - name: Create beta databases
      run: |
        cd asset-tag-backend
        PGPASSWORD=dev_pass psql -h localhost -U dev_user -d postgres -c "CREATE DATABASE asset_tag_beta;"
        PGPASSWORD=dev_pass psql -h localhost -U dev_user -d postgres -c "CREATE DATABASE asset_tag_test;"
      env:
        PGPASSWORD: dev_pass
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Test PostgreSQL
        PGPASSWORD=dev_pass psql -h localhost -U dev_user -d asset_tag_beta -c "SELECT 1;"
        
        # Test Redis
        redis-cli -h localhost ping
        
        # Test Elasticsearch
        curl -f http://localhost:9200/_cluster/health
        
        # Test MinIO
        curl -f http://localhost:9000/minio/health/live
    
    - name: Run database migrations
      run: |
        cd asset-tag-backend
        ASSET_TAG_ENVIRONMENT=beta alembic upgrade head
      env:
        ASSET_TAG_ENVIRONMENT: beta
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_beta
        ASSET_TAG_USE_REDIS: true
        ASSET_TAG_USE_LOCAL_ELASTICSEARCH: true
        ASSET_TAG_USE_LOCAL_STORAGE: true
        ASSET_TAG_ENABLE_STREAMING: true
        ASSET_TAG_USE_LOCAL_STREAMING: true
        ASSET_TAG_ELASTICSEARCH_HOST: localhost
        ASSET_TAG_ELASTICSEARCH_PORT: 9200
        ASSET_TAG_REDIS_HOST: localhost
        ASSET_TAG_REDIS_PORT: 6379
        ASSET_TAG_S3_ENDPOINT_URL: http://localhost:9000
        ASSET_TAG_S3_ACCESS_KEY: minioadmin
        ASSET_TAG_S3_SECRET_KEY: minioadmin
        ASSET_TAG_S3_BUCKET: asset-tag-data
    
    - name: Run integration tests with full services
      run: |
        cd asset-tag-backend
        ASSET_TAG_ENVIRONMENT=beta python -m pytest tests/integration/ -v --tb=short
      env:
        ASSET_TAG_ENVIRONMENT: beta
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_beta
        ASSET_TAG_USE_REDIS: true
        ASSET_TAG_USE_LOCAL_ELASTICSEARCH: true
        ASSET_TAG_USE_LOCAL_STORAGE: true
        ASSET_TAG_ENABLE_STREAMING: true
        ASSET_TAG_USE_LOCAL_STREAMING: true
        ASSET_TAG_ELASTICSEARCH_HOST: localhost
        ASSET_TAG_ELASTICSEARCH_PORT: 9200
        ASSET_TAG_REDIS_HOST: localhost
        ASSET_TAG_REDIS_PORT: 6379
        ASSET_TAG_S3_ENDPOINT_URL: http://localhost:9000
        ASSET_TAG_S3_ACCESS_KEY: minioadmin
        ASSET_TAG_S3_SECRET_KEY: minioadmin
        ASSET_TAG_S3_BUCKET: asset-tag-data
    
    - name: Test API endpoints
      run: |
        cd asset-tag-backend
        # Start the server in background
        ASSET_TAG_ENVIRONMENT=beta uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/api/v1/assets || exit 1
        curl -f http://localhost:8000/api/v1/alerts || exit 1
        
        # Stop server
        kill $SERVER_PID
      env:
        ASSET_TAG_ENVIRONMENT: beta
        ASSET_TAG_POSTGRES_HOST: localhost
        ASSET_TAG_POSTGRES_PORT: 5432
        ASSET_TAG_POSTGRES_USER: dev_user
        ASSET_TAG_POSTGRES_PASSWORD: dev_pass
        ASSET_TAG_POSTGRES_DB: asset_tag_beta
        ASSET_TAG_USE_REDIS: true
        ASSET_TAG_USE_LOCAL_ELASTICSEARCH: true
        ASSET_TAG_USE_LOCAL_STORAGE: true
        ASSET_TAG_ENABLE_STREAMING: true
        ASSET_TAG_USE_LOCAL_STREAMING: true
        ASSET_TAG_ELASTICSEARCH_HOST: localhost
        ASSET_TAG_ELASTICSEARCH_PORT: 9200
        ASSET_TAG_REDIS_HOST: localhost
        ASSET_TAG_REDIS_PORT: 6379
        ASSET_TAG_S3_ENDPOINT_URL: http://localhost:9000
        ASSET_TAG_S3_ACCESS_KEY: minioadmin
        ASSET_TAG_S3_SECRET_KEY: minioadmin
        ASSET_TAG_S3_BUCKET: asset-tag-data

  # Frontend tests
  frontend:
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd asset-tag-frontend
        npm ci
    
    - name: Run tests
      run: |
        cd asset-tag-frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build
      run: |
        cd asset-tag-frontend
        npm run build