name: Auto-Fix Monitor

on:
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types: [completed]

jobs:
  analyze-failures:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Debug workflow information
      run: |
        echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
        echo "Workflow run name: ${{ github.event.workflow_run.name }}"
        echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Workflow run logs URL: ${{ github.event.workflow_run.logs_url }}"
        echo "Workflow run HTML URL: ${{ github.event.workflow_run.html_url }}"
    
    - name: Download workflow logs
      id: download-artifact
      uses: actions/download-artifact@v4
      with:
        name: workflow-logs
        path: ./logs
      continue-on-error: true
    
    - name: Get workflow run logs via API
      id: get_logs
      if: steps.download-artifact.outcome == 'failure'
      run: |
        echo "Artifact download failed, fetching logs via API..."
        
        # Get the workflow run logs via GitHub API
        if curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "${{ github.event.workflow_run.logs_url }}" \
                -o ./workflow-logs.txt; then
          echo "Successfully downloaded logs via API"
          echo "LOGS_AVAILABLE=true" >> $GITHUB_OUTPUT
        else
          echo "Failed to download logs via API as well"
          echo "LOGS_AVAILABLE=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Analyze common errors
      run: |
        echo "Analyzing workflow failure..."
        
        # Initialize error tracking
        echo "ERROR_TYPE=no_logs" >> $GITHUB_ENV
        echo "DEPENDENCY_ERROR=workflow_failure" >> $GITHUB_ENV
        
        # Check if we have logs from artifacts
        if [ -d "./logs" ] && [ "$(ls -A ./logs 2>/dev/null)" ]; then
          echo "Analyzing logs from artifacts..."
          LOG_PATH="./logs"
          # Reset error type since we have logs
          echo "ERROR_TYPE=unknown" >> $GITHUB_ENV
        elif [ -f "./workflow-logs.txt" ] && [ -s "./workflow-logs.txt" ]; then
          echo "Analyzing logs from API..."
          LOG_PATH="./workflow-logs.txt"
          # Reset error type since we have logs
          echo "ERROR_TYPE=unknown" >> $GITHUB_ENV
        else
          echo "No logs available for analysis - will create generic issue"
          echo "ERROR_TYPE=no_logs" >> $GITHUB_ENV
          echo "DEPENDENCY_ERROR=workflow_failure" >> $GITHUB_ENV
          exit 0
        fi
        
        # Check for common dependency issues
        if grep -q "email-validator is not installed" $LOG_PATH 2>/dev/null; then
          echo "DEPENDENCY_ERROR=email-validator" >> $GITHUB_ENV
          echo "ERROR_TYPE=dependency" >> $GITHUB_ENV
        fi
        
        if grep -q "ModuleNotFoundError" $LOG_PATH 2>/dev/null; then
          echo "DEPENDENCY_ERROR=missing_module" >> $GITHUB_ENV
          echo "ERROR_TYPE=dependency" >> $GITHUB_ENV
        fi
        
        if grep -q "ImportError" $LOG_PATH 2>/dev/null; then
          echo "DEPENDENCY_ERROR=import_error" >> $GITHUB_ENV
          echo "ERROR_TYPE=dependency" >> $GITHUB_ENV
        fi
        
        # Check for frontend-specific errors
        if grep -q "npm ERR" $LOG_PATH 2>/dev/null; then
          echo "DEPENDENCY_ERROR=npm_error" >> $GITHUB_ENV
          echo "ERROR_TYPE=dependency" >> $GITHUB_ENV
        fi
        
        if grep -q "Cannot find module" $LOG_PATH 2>/dev/null; then
          echo "DEPENDENCY_ERROR=missing_module" >> $GITHUB_ENV
          echo "ERROR_TYPE=dependency" >> $GITHUB_ENV
        fi
    
    - name: Create issue for dependency errors
      if: env.ERROR_TYPE == 'dependency' || env.ERROR_TYPE == 'no_logs'
      uses: actions/github-script@v7
      with:
        script: |
          const errorType = process.env.ERROR_TYPE;
          const dependencyError = process.env.DEPENDENCY_ERROR;
          
          const title = `ðŸš¨ Auto-detected CI Failure: ${dependencyError}`;
          const body = `
          ## Automated Error Detection
          
          **Error Type:** ${errorType}
          **Specific Error:** ${dependencyError}
          **Workflow:** ${{ github.event.workflow_run.name }}
          **Commit:** ${{ github.event.workflow_run.head_sha }}
          
          ## Suggested Actions
          
          ${dependencyError === 'email-validator' ? 
            '1. Add `email-validator` to requirements.txt\n2. Run `pip install email-validator`' :
            dependencyError === 'npm_error' ?
            '1. Check npm dependencies\n2. Run `npm ci` or `npm install`\n3. Verify package-lock.json' :
            dependencyError === 'missing_module' ?
            '1. Check missing dependencies\n2. Update requirements files or package.json\n3. Verify imports' :
            dependencyError === 'workflow_failure' ?
            '1. Check the workflow run logs manually\n2. Verify all dependencies are properly configured\n3. Check for infrastructure issues' :
            '1. Check missing dependencies\n2. Update requirements files'
          }
          
          ## Workflow Details
          - **Run ID:** ${{ github.event.workflow_run.id }}
          - **URL:** ${{ github.event.workflow_run.html_url }}
          - **Triggered by:** ${{ github.event.workflow_run.triggering_actor.login }}
          
          ---
          *This issue was automatically created by the Auto-Fix Monitor*
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci-failure', 'auto-detected']
          });
    
    - name: Comment on PR if applicable
      if: github.event.workflow_run.pull_requests.length > 0 && (env.ERROR_TYPE == 'dependency' || env.ERROR_TYPE == 'no_logs')
      uses: actions/github-script@v7
      with:
        script: |
          const errorType = process.env.ERROR_TYPE;
          const dependencyError = process.env.DEPENDENCY_ERROR;
          
          if (errorType === 'dependency' || errorType === 'no_logs') {
            const comment = `
            ## ðŸš¨ CI Failure Detected
            
            **Error:** ${dependencyError}
            
            ${dependencyError === 'email-validator' ? 
              '**Quick Fix:** Add \`email-validator\` to your requirements.txt' :
              dependencyError === 'npm_error' ?
              '**Quick Fix:** Check npm dependencies and run \`npm ci\`' :
              dependencyError === 'missing_module' ?
              '**Quick Fix:** Check missing dependencies in requirements.txt or package.json' :
              dependencyError === 'workflow_failure' ?
              '**Action Needed:** Check workflow logs manually for detailed error information' :
              '**Action Needed:** Check for missing dependencies'
            }
            
            [View full logs](${{ github.event.workflow_run.html_url }})
            `;
            
            const pr = context.payload.workflow_run.pull_requests[0];
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
          }
