name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  test-fast:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json

    - name: Debug directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Contents of asset-tag-frontend directory:"
        ls -la asset-tag-frontend/ || echo "asset-tag-frontend directory not found"

    - name: Verify package-lock.json exists
      run: |
        cd asset-tag-frontend
        echo "Current directory: $(pwd)"
        echo "Contents of asset-tag-frontend:"
        ls -la
        if [ ! -f "package-lock.json" ]; then
          echo "‚ùå package-lock.json not found!"
          echo "Looking for package-lock.json in parent directories..."
          find .. -name "package-lock.json" -type f 2>/dev/null || echo "No package-lock.json found anywhere"
          exit 1
        fi
        echo "‚úÖ package-lock.json found"
        echo "File size: $(wc -c < package-lock.json) bytes"
        echo "Lockfile version: $(node -p "require('./package-lock.json').lockfileVersion")"

    - name: Install dependencies
      run: |
        cd asset-tag-frontend
        npm --version
        echo "Attempting npm ci..."
        if npm ci --verbose; then
          echo "‚úÖ npm ci succeeded"
        else
          echo "‚ùå npm ci failed, trying npm install as fallback..."
          npm install --verbose
        fi

    - name: Run fast tests
      run: |
        cd asset-tag-frontend
        npm run test:run

  test-comprehensive:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json

    - name: Debug directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Contents of asset-tag-frontend directory:"
        ls -la asset-tag-frontend/ || echo "asset-tag-frontend directory not found"

    - name: Verify package-lock.json exists
      run: |
        cd asset-tag-frontend
        echo "Current directory: $(pwd)"
        echo "Contents of asset-tag-frontend:"
        ls -la
        if [ ! -f "package-lock.json" ]; then
          echo "‚ùå package-lock.json not found!"
          echo "Looking for package-lock.json in parent directories..."
          find .. -name "package-lock.json" -type f 2>/dev/null || echo "No package-lock.json found anywhere"
          exit 1
        fi
        echo "‚úÖ package-lock.json found"
        echo "File size: $(wc -c < package-lock.json) bytes"
        echo "Lockfile version: $(node -p "require('./package-lock.json').lockfileVersion")"

    - name: Install dependencies
      run: |
        cd asset-tag-frontend
        npm --version
        echo "Attempting npm ci..."
        if npm ci --verbose; then
          echo "‚úÖ npm ci succeeded"
        else
          echo "‚ùå npm ci failed, trying npm install as fallback..."
          npm install --verbose
        fi

    - name: Run comprehensive tests
      run: |
        cd asset-tag-frontend
        npm run test:run

  build:
    runs-on: ubuntu-latest
    needs: [test-fast, test-comprehensive]
    if: always() && (needs.test-fast.result == 'success' || needs.test-comprehensive.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd asset-tag-frontend
        npm --version
        echo "Attempting npm ci..."
        if npm ci --verbose; then
          echo "‚úÖ npm ci succeeded"
        else
          echo "‚ùå npm ci failed, trying npm install as fallback..."
          npm install --verbose
        fi

    - name: Build frontend
      run: |
        cd asset-tag-frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: asset-tag-frontend/build/

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-fast, test-comprehensive]
    if: always() && (needs.test-fast.result == 'success' || needs.test-comprehensive.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd asset-tag-frontend
        npm --version
        echo "Attempting npm ci..."
        if npm ci --verbose; then
          echo "‚úÖ npm ci succeeded"
        else
          echo "‚ùå npm ci failed, trying npm install as fallback..."
          npm install --verbose
        fi

    - name: Run tests with coverage
      run: |
        cd asset-tag-frontend
        npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./asset-tag-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Comment frontend coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read coverage summary
            const coveragePath = path.join(process.cwd(), 'asset-tag-frontend', 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const summary = coverage.total;
              
              const comment = `## üé® Frontend Test Coverage Report
              
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | **Statements** | ${summary.statements.pct}% | 50% |
              | **Branches** | ${summary.branches.pct}% | 50% |
              | **Functions** | ${summary.functions.pct}% | 50% |
              | **Lines** | ${summary.lines.pct}% | 50% |
              
              ${summary.statements.pct >= 50 && summary.branches.pct >= 50 && summary.functions.pct >= 50 && summary.lines.pct >= 50 ? 
                '‚úÖ All frontend coverage thresholds met!' : 
                '‚ö†Ô∏è Some frontend coverage thresholds not met. Consider adding more tests.'}
              
              <details>
              <summary>Detailed Frontend Coverage</summary>
              
              - **Statements**: ${summary.statements.covered}/${summary.statements.total} (${summary.statements.pct}%)
              - **Branches**: ${summary.branches.covered}/${summary.branches.total} (${summary.branches.pct}%)
              - **Functions**: ${summary.functions.covered}/${summary.functions.total} (${summary.functions.pct}%)
              - **Lines**: ${summary.lines.covered}/${summary.lines.total} (${summary.lines.pct}%)
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read frontend coverage summary:', error.message);
          }
