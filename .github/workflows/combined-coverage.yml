name: Combined Coverage Report

on:
  workflow_run:
    workflows: ["Main CI/CD Pipeline"]
    types: [completed]
    branches: [main, develop]

jobs:
  aggregate-coverage:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend coverage
      uses: actions/download-artifact@v3
      with:
        name: frontend-coverage
        path: ./frontend-coverage/
      continue-on-error: true

    - name: Download backend coverage
      uses: actions/download-artifact@v3
      with:
        name: backend-coverage
        path: ./backend-coverage/
      continue-on-error: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        # Install frontend dependencies for coverage processing
        cd asset-tag-frontend
        npm ci || npm install
        
        # Install backend dependencies for coverage processing
        cd ../asset-tag-backend
        pip install -r requirements-dev.txt

    - name: Generate combined coverage report
      run: |
        echo "Generating combined coverage report..."
        
        # Create combined coverage directory
        mkdir -p combined-coverage
        
        # Process frontend coverage
        if [ -f "asset-tag-frontend/coverage/coverage-summary.json" ]; then
          echo "Processing frontend coverage..."
          node -e "
            const fs = require('fs');
            const frontendCoverage = JSON.parse(fs.readFileSync('asset-tag-frontend/coverage/coverage-summary.json', 'utf8'));
            const frontendSummary = frontendCoverage.total;
            
            const combinedReport = {
              frontend: {
                statements: frontendSummary.statements,
                branches: frontendSummary.branches,
                functions: frontendSummary.functions,
                lines: frontendSummary.lines
              },
              timestamp: new Date().toISOString(),
              workflow_run: process.env.GITHUB_RUN_ID
            };
            
            fs.writeFileSync('combined-coverage/frontend-coverage.json', JSON.stringify(frontendSummary, null, 2));
            fs.writeFileSync('combined-coverage/combined-report.json', JSON.stringify(combinedReport, null, 2));
            
            console.log('Frontend Coverage Summary:');
            console.log(\`  Statements: \${frontendSummary.statements.pct}%\`);
            console.log(\`  Branches: \${frontendSummary.branches.pct}%\`);
            console.log(\`  Functions: \${frontendSummary.functions.pct}%\`);
            console.log(\`  Lines: \${frontendSummary.lines.pct}%\`);
          "
        else
          echo "Frontend coverage not found"
        fi
        
        # Process backend coverage
        if [ -f "asset-tag-backend/coverage.json" ]; then
          echo "Processing backend coverage..."
          node -e "
            const fs = require('fs');
            const backendCoverage = JSON.parse(fs.readFileSync('asset-tag-backend/coverage.json', 'utf8'));
            const backendSummary = backendCoverage.totals;
            
            const combinedReport = JSON.parse(fs.readFileSync('combined-coverage/combined-report.json', 'utf8'));
            combinedReport.backend = {
              lines: {
                covered: backendSummary.covered_lines,
                total: backendSummary.num_statements,
                pct: backendSummary.percent_covered
              },
              branches: {
                covered: backendSummary.covered_branches,
                total: backendSummary.num_branches,
                pct: backendSummary.percent_covered
              },
              files: backendSummary.num_files
            };
            
            fs.writeFileSync('combined-coverage/backend-coverage.json', JSON.stringify(backendSummary, null, 2));
            fs.writeFileSync('combined-coverage/combined-report.json', JSON.stringify(combinedReport, null, 2));
            
            console.log('Backend Coverage Summary:');
            console.log(\`  Lines: \${backendSummary.percent_covered_display}%\`);
            console.log(\`  Branches: \${backendSummary.percent_covered_display}%\`);
            console.log(\`  Files: \${backendSummary.num_files}\`);
          "
        else
          echo "Backend coverage not found"
        fi

    - name: Upload combined coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: combined-coverage/

  post-summary:
    runs-on: ubuntu-latest
    needs: aggregate-coverage
    if: github.event_name == 'pull_request' && needs.aggregate-coverage.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download combined coverage
      uses: actions/download-artifact@v3
      with:
        name: combined-coverage-report
        path: ./combined-coverage/

    - name: Post combined coverage summary
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            if (fs.existsSync('combined-coverage/combined-report.json')) {
              const report = JSON.parse(fs.readFileSync('combined-coverage/combined-report.json', 'utf8'));
              
              let comment = `## üìä Combined Test Coverage Report
              
              ### üé® Frontend Coverage
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | **Statements** | ${report.frontend?.statements?.pct || 'N/A'}% | 50% |
              | **Branches** | ${report.frontend?.branches?.pct || 'N/A'}% | 50% |
              | **Functions** | ${report.frontend?.functions?.pct || 'N/A'}% | 50% |
              | **Lines** | ${report.frontend?.lines?.pct || 'N/A'}% | 50% |
              
              ### üêç Backend Coverage
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | **Lines** | ${report.backend?.lines?.pct || 'N/A'}% | 50% |
              | **Branches** | ${report.backend?.branches?.pct || 'N/A'}% | 50% |
              | **Files** | ${report.backend?.files || 'N/A'} | - |
              
              ### üìà Overall Health
              `;
              
              // Calculate overall health
              const frontendAvg = report.frontend ? 
                (report.frontend.statements.pct + report.frontend.branches.pct + 
                 report.frontend.functions.pct + report.frontend.lines.pct) / 4 : 0;
              
              const backendAvg = report.backend ? 
                (report.backend.lines.pct + report.backend.branches.pct) / 2 : 0;
              
              const overallAvg = (frontendAvg + backendAvg) / 2;
              
              comment += `
              - **Frontend Average**: ${frontendAvg.toFixed(1)}%
              - **Backend Average**: ${backendAvg.toFixed(1)}%
              - **Overall Project**: ${overallAvg.toFixed(1)}%
              
              ${overallAvg >= 50 ? 
                '‚úÖ **Overall project coverage meets threshold!**' : 
                '‚ö†Ô∏è **Overall project coverage below threshold. Consider adding more tests.**'}
              
              <details>
              <summary>Detailed Breakdown</summary>
              
              **Frontend Details:**
              - Statements: ${report.frontend?.statements?.covered || 0}/${report.frontend?.statements?.total || 0}
              - Branches: ${report.frontend?.branches?.covered || 0}/${report.frontend?.branches?.total || 0}
              - Functions: ${report.frontend?.functions?.covered || 0}/${report.frontend?.functions?.total || 0}
              - Lines: ${report.frontend?.lines?.covered || 0}/${report.frontend?.lines?.total || 0}
              
              **Backend Details:**
              - Lines: ${report.backend?.lines?.covered || 0}/${report.backend?.lines?.total || 0}
              - Branches: ${report.backend?.branches?.covered || 0}/${report.backend?.branches?.total || 0}
              - Files: ${report.backend?.files || 0}
              
              </details>
              
              ---
              *Generated by Combined Coverage Workflow - Run ID: ${report.workflow_run}*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not generate combined coverage report:', error.message);
          }

  update-readme:
    runs-on: ubuntu-latest
    needs: aggregate-coverage
    if: github.ref == 'refs/heads/main' && needs.aggregate-coverage.result == 'success'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download combined coverage
      uses: actions/download-artifact@v3
      with:
        name: combined-coverage-report
        path: ./combined-coverage/

    - name: Update README with coverage badges
      run: |
        if [ -f "combined-coverage/combined-report.json" ]; then
          node -e "
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('combined-coverage/combined-report.json', 'utf8'));
            
            // Calculate overall coverage
            const frontendAvg = report.frontend ? 
              (report.frontend.statements.pct + report.frontend.branches.pct + 
               report.frontend.functions.pct + report.frontend.lines.pct) / 4 : 0;
            
            const backendAvg = report.backend ? 
              (report.backend.lines.pct + report.backend.branches.pct) / 2 : 0;
            
            const overallAvg = Math.round((frontendAvg + backendAvg) / 2);
            const frontendBadge = Math.round(frontendAvg);
            const backendBadge = Math.round(backendAvg);
            
            const overallColor = overallAvg >= 80 ? 'brightgreen' : overallAvg >= 60 ? 'yellow' : 'red';
            const frontendColor = frontendBadge >= 80 ? 'brightgreen' : frontendBadge >= 60 ? 'yellow' : 'red';
            const backendColor = backendBadge >= 80 ? 'brightgreen' : backendBadge >= 60 ? 'yellow' : 'red';
            
            const badges = \`![Overall Coverage](https://img.shields.io/badge/coverage-\${overallAvg}%25-\${overallColor})
            ![Frontend Coverage](https://img.shields.io/badge/frontend-\${frontendBadge}%25-\${frontendColor})
            ![Backend Coverage](https://img.shields.io/badge/backend-\${backendBadge}%25-\${backendColor})\`;
            
            console.log('Coverage badges:', badges);
            
            // Update README if it exists
            if (fs.existsSync('README.md')) {
              let readme = fs.readFileSync('README.md', 'utf8');
              
              // Remove old coverage badges
              readme = readme.replace(/!\[.*?Coverage.*?\]\(https:\/\/img\.shields\.io\/badge\/.*?\)/g, '');
              readme = readme.replace(/\n\s*\n\s*\n/g, '\n\n'); // Clean up extra newlines
              
              // Add new badges at the top
              readme = badges + '\n\n' + readme;
              
              fs.writeFileSync('README.md', readme);
              console.log('Updated README with coverage badges');
            }
          "
        fi

    - name: Commit coverage badges
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update coverage badges [skip ci]"
        git push
