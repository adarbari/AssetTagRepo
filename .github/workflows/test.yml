name: Test Asset Tag Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd asset-tag-backend
        flake8 modules tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 modules tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        cd asset-tag-backend
        black --check modules tests
    
    - name: Check import sorting with isort
      run: |
        cd asset-tag-backend
        isort --check-only modules tests
    
    - name: Type check with mypy
      run: |
        cd asset-tag-backend
        mypy modules --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py unit
    
    - name: Run integration tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py integration
    
    - name: Generate coverage report
      run: |
        cd asset-tag-backend
        pytest tests/ --cov=modules --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./asset-tag-backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: asset-tag-frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd asset-tag-frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd asset-tag-frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd asset-tag-frontend
        npm run build

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        cd asset-tag-backend
        bandit -r modules -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        cd asset-tag-backend
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          asset-tag-backend/bandit-report.json
          asset-tag-backend/safety-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        cd asset-tag-backend
        # Add performance test commands here
        echo "Performance tests would run here"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: asset-tag-backend/performance-results/
