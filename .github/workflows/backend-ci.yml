name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'asset-tag-backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd asset-tag-backend
        flake8 modules tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 modules tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        cd asset-tag-backend
        black --check modules tests
    
    - name: Check import sorting with isort
      run: |
        cd asset-tag-backend
        isort --check-only modules tests
    
    - name: Type check with mypy
      run: |
        cd asset-tag-backend
        mypy modules --ignore-missing-imports

  test-fast:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Run unit tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py unit
    
    - name: Run integration tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py integration

  test-comprehensive:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Run unit tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py unit
    
    - name: Run integration tests
      run: |
        cd asset-tag-backend
        python tests/run_tests.py integration

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        cd asset-tag-backend
        bandit -r modules -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        cd asset-tag-backend
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          asset-tag-backend/bandit-report.json
          asset-tag-backend/safety-report.json

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-fast, test-comprehensive]
    if: always() && (needs.test-fast.result == 'success' || needs.test-comprehensive.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r asset-tag-backend/requirements-dev.txt
    
    - name: Generate coverage report
      run: |
        cd asset-tag-backend
        pytest tests/ --cov=modules --cov-report=xml --cov-report=html --cov-report=json
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./asset-tag-backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Comment backend coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read coverage summary
            const coveragePath = path.join(process.cwd(), 'asset-tag-backend', 'coverage.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const summary = coverage.totals;
              
              const comment = `## üêç Backend Test Coverage Report
              
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | **Lines** | ${summary.percent_covered_display}% | 50% |
              | **Branches** | ${summary.percent_covered_display}% | 50% |
              
              ${summary.percent_covered >= 50 ? 
                '‚úÖ All backend coverage thresholds met!' : 
                '‚ö†Ô∏è Backend coverage below threshold. Consider adding more tests.'}
              
              <details>
              <summary>Detailed Backend Coverage</summary>
              
              - **Lines Covered**: ${summary.covered_lines}/${summary.num_statements} (${summary.percent_covered_display}%)
              - **Branches Covered**: ${summary.covered_branches}/${summary.num_branches} (${summary.percent_covered_display}%)
              - **Files**: ${summary.num_files} files analyzed
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read backend coverage summary:', error.message);
          }
